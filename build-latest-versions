#!/bin/bash

set -e

release='wheezy'
releasenum=d7
base=`dirname "$(readlink -f "$0")"`
cd "$base"
build="$base/build"
dist="$base/dist"
repo="$base/repo"

source "$base"/settings

[ -d "$build" ] || mkdir "$build"
[ -d "$dist" ] || mkdir "$dist"

for branch in debian debian-testing; do
	root=http://ceph.com/$branch/pool/main/c/ceph/
	"$base"/download-info "$root"
	./status.py > repo/status.json
	dsc=$(ls ceph.com/$branch/pool/main/c/ceph/*dsc | sed 's/^.*\///' | python2 -c 'from sys import stdin; from pkg_resources import parse_version; print "\n".join(sorted((l.strip() for l in stdin.readlines()), key=parse_version))' | tail -n 1)
	version=$(echo "$dsc" | sed 's/^[^_]*_\(.*\)\.dsc$/\1/')
	newdsc=$(echo "$dsc" | sed 's/\.dsc$/~'$SUFFIX$releasenum'.dsc/')
	newversion="$version"~"$SUFFIX$releasenum"

	buildlocation="$build"/$(echo $dsc | sed -E 's/^([^_]*)_([^-]*)-.*$/\1-\2/')
	for arch in armel armhf raspbian; do
		rm -rf "$build"/*
		variant=debian
		[ $arch == raspbian ] && variant=raspbian && arch="armhf" && branch=`echo "$branch" | sed 's/debian/raspbian/'`
		finallocation="$dist/$variant/$version/$arch/ceph_${newversion}_${arch}.deb"
		finaldir=$(dirname "$finallocation")
		sourcedir=$(dirname "$finaldir")
		[ -d "$finaldir" ] || mkdir -p "$finaldir"
		if ! [ -e $finallocation ]; then
			echo "Preparing source directory for $release/$arch"
			if ! [ -e "$sourcedir/$newdsc" ]; then
				[ -d "$build" ] || mkdir "$build"
				pushd "$build"
				"$base"/download_dsc "$root$dsc"
				[ $? -eq 0 ] || exit 1
				popd
			else
				cp "$sourcedir/$newdsc" "$build"
				cp "$sourcedir"/*gz "$build"
			fi
			echo "Building $version for $release/$arch"
			cat <<EOF >"$build"/build.json
{
"type": "$variant",
"distro": "$release",
"version": "`ls $build/*.dsc | head -n 1 | sed -E 's/^[^_]*_([^~]*)(~.*)?.dsc/\1/'`",
"arch": "$arch"
}
EOF
			./status.py > repo/status.json
			pushd "$build"

			arch=$arch variant=$variant release=$release releasenum=$releasenum "$base"/build-current-directory
			popd
			echo "Saving compiled artifacts"
			pushd "$build"
			cp *changes *deb "$finaldir"
			if grep -q 'dsc$' *changes; then	# built a source package
				cp "$newdsc" "$sourcedir"
				files=`cat "$newdsc" | sed '1,/^Files:/d' | sed -E '/^\S/,$d'`
				echo "$files" | while read line; do
					name=$(echo "$line" | awk '{print $3}')
					cp "$name" "$sourcedir"
				done
			fi
			if [ "$variant" == "raspbian" ]; then
				rename -v 's/armhf/raspbian/' *build
			fi
			cp *-20*build "$repo"/logs
			popd # build/ dir
			./status.py > repo/status.json
		fi
		if ! [ -e "$repo/$branch/pool/main/c/ceph/ceph_${newversion}_${arch}.deb" ]; then
			# copy to repo
			echo "Deploying $variant/$branch/$arch to repo"
			incoming="$repo/$branch/incoming"
			cp "$finaldir"/*.changes "$finaldir"/*deb "$incoming"
			cp "$sourcedir"/*gz "$sourcedir"/*dsc "$incoming"
			pushd "$repo/$branch"
			reprepro -V --keepunreferencedfiles include $release incoming/*changes
			rm incoming/*
			popd # repo dir
			./status.py > repo/status.json
		fi
	done
done
